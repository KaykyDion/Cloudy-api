// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid()) @db.Uuid
  name          String        @unique @db.VarChar(30)
  email         String        @unique @db.VarChar(255)
  bio           String?       @db.VarChar(255)
  profilePhoto  String?
  password      String        @db.VarChar(255)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  posts         Post[]
  likedPosts    Post[]        @relation("PostLikes")
  likedComments PostComment[] @relation("CommentLikes")
  userComments  PostComment[]
  followers     Follower[]    @relation("UserFollowing")
  following     Follower[]    @relation("UserFollowers")
}

model Follower {
  followerId  String   @db.Uuid
  followingId String   @db.Uuid
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Post {
  id        String        @id @default(uuid()) @db.Uuid
  content   String        @db.Text
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  ownerId   String        @db.Uuid
  owner     User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  comments  PostComment[]
  likes     User[]        @relation("PostLikes")
}

model PostComment {
  id        String   @id @default(uuid()) @db.Uuid
  ownerId   String   @db.Uuid
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String   @db.Uuid
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes     User[]   @relation("CommentLikes")
}
